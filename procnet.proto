/*
 * Copyright (c) 2020, RISE Research Institutes of Sweden AB.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the Institute nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

/* Author: Nicolas Tsiftes <nicolas.tsiftes@ri.se> */

syntax = "proto2";

message Hello {
  enum SystemType {
    CONTROLLER = 1;
    FORWARDER  = 2;
    NODE       = 3;
  }

  required SystemType system_type = 1;
  optional string auth_token = 2;
  required string system_name = 3;
  required string system_version = 4;
  optional uint32 node_count = 5;
}

message Config {
  enum Synchronization {
    DETERMINISTIC     = 1;
    SEMIDETERMINISTIC = 2;
    NONDETERMINISTIC  = 3;
  }

  required uint32 node_id = 1;
  required Synchronization sync = 2;
  required uint32 time_granularity = 3;
  optional uint32 tick_time = 4;
  optional bytes ipv6_prefix = 5;
}

message Buf {
  enum BufType {
    BUF_PACKET = 1;
    BUF_ACK    = 2;
    BUF_STDIN  = 3;
    BUF_STDOUT = 4;
    BUF_STDERR = 5;
  }

  required BufType type = 1;
  required bytes data = 2;
  optional uint64 jiffies = 3;
  optional uint64 packet_id = 4;
  optional int32 rssi = 5;
  optional uint32 channel = 6;
}
